#PACKAGE INSTALLATIONS =====================================================

install.packages('BiocManager') 
BiocManager::install("GEOquery") 
install.packages("plyr") 
install.packages("dplyr")
install.packages("Matrix") 
BiocManager::install('multtest') 
install.packages('metap')
install.packages("Seurat") 
install.packages('ggplot2') 
install.packages("cowplot") 
install.packages("devtools") 
devtools::install_github("mohuangx/SAVER") 
BiocManager::install("DESeq2")
install.packages("msigdbr")
BiocManager::install("fgsea")


#note, and I quote, "Monocle3 is hell to install". But here are their instructions:
https://cole-trapnell-lab.github.io/monocle3/docs/installation/ 
  
  
  #installing velocyto.R (package for RNA velocity analysis) instructions
  https://github.com/velocyto-team/velocyto.R

BiocManager::install("pcaMethods")
library(devtools)
library(pcaMethods)
install_github("velocyto-team/velocyto.R")
library(velocyto.R)


#install LoomR (file type input into velocyto.R for RNA velocity analysis)
(library(devtools)
  devtools::install_github(repo = "hhoeflin/hdf5r")
  install.packages("stringi")
  devtools::install_github(repo = "mojaveazure/loomR", ref = "develop")
  
  
  #Install SeuratWrappers if you need it (will need for RNA velocity)
  install.packages("remotes")
  install.packages("vctrs")
  install.packages("lifecycle")
  rtools <- "C:\\Rtools\\bin"
  gcc <- "C:\\Rtools\\gcc-4.6.3\\bin"
  path <- strsplit(Sys.getenv("PATH"), ";")[[1]]
  new_path <- c(rtools, gcc, path)
  new_path <- new_path[!duplicated(tolower(new_path))]
  Sys.setenv(PATH = paste(new_path, collapse = ";"))
  install.packages("ellipse")       # Install the dependent package ellipse
  install.packages('/tmp/RtmpCAMbyw/filedabd3e2e7efe/SeuratWrappers_0.3.0.tar.gz',  type="source", repos=NULL)
  
  
#LIBRARIES ===============================================================================================================
  
  library(BiocManager)
  library(GEOquery) 
  library(plyr)
  library(dplyr) 
  library(Matrix) 
  library(devtools)
  library(Seurat) 
  library(ggplot2) 
  library(cowplot) 
  library(SAVER) 
  library(metap)
  library(multtest)
  library(DESeq2)
  library(msigdbr)
  library(fgsea)
  library(monocle3)
  library(velocyto.R)
  library(loomR)
  
  
  
#LOADING IN DATA =========================================================================================================
 
  library(BiocManager)
  library(GEOquery) 
 
 #dataset to use :D https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE166766 
 
#Put NCBI GEO# into the inside of the parentheses. (ex. GSE12345)  
filePaths = getGEOSuppFiles("GSE166766")  
  
#Copy paste the GEO12345 number between the "path = / /" sections   
tarF <- list.files(path = "./GSE166766/", pattern = "*.tar", full.names = TRUE)  
  
#This will extract that single raw data file and unzip the files within it.  
#Copy past the GEO12345 number between the "path = / /" sections  
  
untar(tarF, exdir = "./GSE166766/")  
gzipF <- list.files(path = "./GSE166766/", pattern = "*.gz", full.names = TRUE)  
ldply(.data = gzipF, .fun = gunzip)  
  
  
list.files(path = "./GSE166766/", pattern = "\\.mtx$",full.names = TRUE) 
list.files(path = "./GSE166766/", pattern = "*.genes.tsv$", full.names = TRUE)  
list.files(path = "./GSE166766/", pattern = "*.barcodes.tsv$", full.names = TRUE)  
  
  
#MATRIX CREATION (MAIN PART TO BE AUTOMATED essentially it is just just copy-paste the file paths from lines 94-96 into each "file =" =========================================================================================================
 
  library(plyr)
  library(dplyr) 
  library(Matrix) 
  library(Seurat) 
  library(cowplot) 
  library(SAVER) 
 
#control group______________________________________________________________________________________  
control_matrix <- readMM(file = './GSE119352/GSM3371684_Control_matrix.mtx') #copy-paste .mtx file path here
control_matrix <- as.matrix(control_matrix)
  
control_genes <- read.table(file = './GSE119352/GSM3371684_Control_genes.tsv', 
                            sep = '\t', header = FALSE, stringsAsFactors = FALSE) #copy-paste .genes.tsv file path here
rownames(control_matrix) <- control_genes[,2]
  
control_barcodes <- read.table(file = './GSE119352/GSM3371684_Control_barcodes.tsv', 
                                sep = '\t', header = FALSE, stringsAsFactors = FALSE) #copy-paste .barcodes.tsv file path here
colnames(control_matrix) <- control_barcodes[,1]
  
colnames(control_matrix) <- paste(colnames(control_matrix), "control", sep = "_")
control_pdat <- data.frame("samples" = colnames(control_matrix), "treatment" = "control")

#antiPD1 group ________________________________________________________________________________________
aPD1_matrix <- readMM(file = './GSE119352/GSM3371685_aPD1_matrix.mtx')
aPD1_matrix <- as.matrix(aPD1_matrix)
aPD1_matrix[1:5,1:5]
#dim(aPD1_matrix)

aPD1_genes <- read.table(file = './GSE119352/GSM3371685_aPD1_genes.tsv', 
                         sep = '\t', header = FALSE, stringsAsFactors = FALSE)
#dim(aPD1_genes)
rownames(aPD1_matrix) <- aPD1_genes[,2]
aPD1_matrix[1:5,1:5]

aPD1_barcodes <- read.table(file = './GSE119352/GSM3371685_aPD1_barcodes.tsv', 
                            sep = '\t', header = FALSE, stringsAsFactors = FALSE)
#dim(aPD1_barcodes)
colnames(aPD1_matrix) <- aPD1_barcodes[,1]
aPD1_matrix[1:5,1:5]
colnames(aPD1_matrix) <- paste(colnames(aPD1_matrix), "aPD1", sep = "_")

aPD1_pdat <- data.frame("samples" = colnames(aPD1_matrix), "treatment" = "aPD1")


# MERGING MATRICES FOR SEURAT OBJECT CREATION ===========================================================================================

  library(plyr)
  library(dplyr) 
  library(Matrix) 
  library(Seurat) 
  library(cowplot) 
  library(SAVER) 
 
joined <- cbind(control_matrix,aPD1_matrix)
#dim(joined)
pdat <- rbind(control_pdat, aPD1_pdat)

whole_gene_list <- rbind(control_genes, aPD1_genes) 
genelist <- whole_gene_list[!duplicated(whole_gene_list$V1), ] 
 
rownames(pdat) <- pdat$samples
fdat <- toupper(as.matrix(genelist))

rownames(fdat) <- fdat[,2]
fdat <- data.frame(fdat)
common_colnames <- c("ensembl_id", "gene_short_name")
colnames(fdat) <- common_colnames

rownames(joined) <- rownames(fdat)

#Seurat Object Creation______________________________________________________
sobj<- CreateSeuratObject(counts = joined)
sobj<-AddMetaData(sobj,metadata=pdat)
#head(sobj@meta.data, 5)

sobj[["RNA"]]@meta.features<-fdat
#head(sobj[["RNA"]]@meta.features)
slotNames(sobj[["RNA"]])


 # monocle 3=========================================================================
BiocManager::install()
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
                       'limma', 'S4Vectors', 'SingleCellExperiment',
                       'SummarizedExperiment', 'batchelor'))
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("remotes")
remotes::install_github("satijalab/seurat-wrappers")

 
library(monocle3)
library(dplyr)
library(SeuratWrappers)


DimPlot(Epcamsmartseq)
cds <- as.cell_data_set(Epcamsmartseq) # use seurat project sobj here
cds <- cluster_cells(cds = cds, reduction_method = "UMAP")
cds <- learn_graph(cds, use_partition = TRUE)
cds <- order_cells(cds, reduction_method = "UMAP")
rowData(cds)$gene_short_name <- rownames(rowData(cds))
plot_cells(cds,
           color_cells_by = "pseudotime",
           label_cell_groups=FALSE,
           label_leaves=FALSE,
           label_branch_points=FALSE,
           graph_label_size=1.5)

AFD_genes <- c("Ly6c2")
AFD_lineage_cds <- cds[rowData(cds)$gene_short_name %in% AFD_genes, ]
plot_genes_in_pseudotime(AFD_lineage_cds, min_expr=0.5)
